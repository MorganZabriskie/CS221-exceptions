****************
* Exceptions
* CS221 Fall 2024
* 09/17/24
* Morgan Zabriskie
**************** 

OVERVIEW:

This FormatChecker program takes files from the command line
and checks if the file is valid or invalid based on the criteria
outlined in the program design section below.


INCLUDED FILES:
 * FormatChecker.java - main driver and FormatChecker class
 * README - this file


COMPILING AND RUNNING:

 From the folder that contains all source files, compile
 with the command:
 $ javac FormatChecker.java

 Run the compiled class and provide file names to be checked
 as valid or invalid with the command:
 $ java FormatChecker file1 [file2 ... fileN]

 The console output will list the name of the file, any errors
 in the file format, and whether it is valid or invalid.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 The FormatChecker() program is found all in one source file. This is
 because the main driver and the class and methods are short enough
 that they can all be in one file without being too cluttered or
 confusing.

 The driver class runs through each file given by the user in the 
 command line, creating a new FormatChecker object. The constructor
 instantiates whether the file is valid or not by calling the
 isValid() method. Then the main driver calls the returnMessage() method
 to let the user know if the file was valid or invalid.

 A valid file has the following
 format:
 -First row contains two integers separated by a white space. The first 
 value is the number of rows in a grid and the second value is the number 
 of columns in the grid.
 -The rest of the file should be a grid of double values that follows
 the number of rows and columns given in the first row.
 An example of a correctly formatted file is:

 2 3
 1.0 2 3
 1 2.0 3
 
 The exceptions handling in this program is done through try and catch 
 blocks. When an exception is caught, the exception's toString() method 
 is called so the user can see a short message of why their file was
 invalid or why the program could not run.

 Given more time I would try to make the exceptions handling more consistent
 throughout the program. Right now it's a mix of methods that throw an
 exception and methods that exclusively use try/catch blocks.

TESTING:
 
 This program was tested by using a variety of valid and invalid files that
 tested:
 - If the first row had the right number of arguments, that they were integers,
 and that they were positive
 - If the grid after the first row had the exact right number of rows and 
 columns and that those values were all doubles

 We also tested for if the file name did not exist and if there were no files
 given in the command line. 


DISCUSSION:

 This assignment was good for testing my understanding of exceptions and how
 they work in practice. I found that I was trying to throw an exception but
 was also writing if statements that would prevent the error from ever being
 thrown - i.e. I was throwing a FileNotFoundException in the method header
 but then also writing an if(file.exists() && file.isFile()) statement that
 would preclude the error being thrown.

 I also ran into some issues with the scanner not parsing things the way I
 thought it would, so had to really think through what's happening when
 I say scan.next() versus scan.nextLine(), etc. The delimeter I initially
 used ("\s") didn't account for whitespaces that were more than one space,
 but I did some research and found that ("\\s+") would account for 
 multiple white spaces.

 Initially I was writing all my own error messages but saw in some of the 
 code examples that you can use error.toString() and it gives you a nice
 short exception message and sometimes includes details about what caused the
 exception. I liked that there was that option and that they were so succint.

 I need to review exceptions more - I still don't think I 100% get them. Will
 plan to stop by for office hours to discuss more!



